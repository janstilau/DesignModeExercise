//
//  proxy.h
//  DesignMode
//
//  Created by justin lau on 2017/8/30.
//  Copyright © 2017年 jansti. All rights reserved.
//

#ifndef proxy_h
#define proxy_h


/*
    代理模式
    代理模式, 适配器模式, 桥接模式, 装饰器模式.都是利用组合这种方式实现功能.所以看起来很像,但是作用则不相同.
    适配器模式,想要做的就是改变接口,如果说需要增加功能,也是为了适应接口添加的功能.比如,一个数据类表示几何体,可能会
 有一个接口是之前没有的,但是这个接口是在新的功能里需要的.这个时候,只能讲这个功能添加在适配器里了.
    但是,代理模式,却是为了添加新功能而做的一种组合.原有的类,其实是已经有了完整的功能体系了.但是,我们要在上面做一层
 包装.这样听起来很像是装饰模式,但是我们这里所做的包装,是一层的包装,也是和原有的类的功能可能功能不是那么紧密的包装.
    代理的接口,是和所代理的接口一模一样的.用户如果不看类名,不应该感受到代理和实际类的差异
    1 romone access ,那么这种代理类,可能在任何的get,set之前,都有一个网络请求的过程,任何的数据交换,都有 检查网络
 状态, 构建网络请求取值,赋值 这样的一个过程.这个过程代码很琐碎,也是每一次的setget都要用得到.在过程之中,改会有失败重
 试或者窗口提示的功能.这些,对于类的使用者来说,不关心,他只是想要setget而已.所以,我们用代理类,将代理的实现完善,实现刚
 刚描述的过程.
    2 权限的管理. 访问之前,检查权限.
    3 书中例子.图片的代理.图片没有真正生成的时候,由代理类进行代替.代理类可以有一张placeHolder图片,在需要进行绘图的
 时候,如果真实图片没有生成,用站位图进行展示,如果生成了,再用实际图.
 
 */


#endif /* proxy_h */
